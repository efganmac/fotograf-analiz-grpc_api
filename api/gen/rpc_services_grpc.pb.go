// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: rpc_services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageManagementServiceClient is the client API for ImageManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageManagementServiceClient interface {
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	GetImageDetail(ctx context.Context, in *GetImageDetailRequest, opts ...grpc.CallOption) (*GetImageDetailResponse, error)
	GetImageFeed(ctx context.Context, in *GetImageFeedRequest, opts ...grpc.CallOption) (*GetImageFeedResponse, error)
	UpdateImageDetail(ctx context.Context, in *UpdateImageDetailRequest, opts ...grpc.CallOption) (*UpdateImageDetailResponse, error)
}

type imageManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageManagementServiceClient(cc grpc.ClientConnInterface) ImageManagementServiceClient {
	return &imageManagementServiceClient{cc}
}

func (c *imageManagementServiceClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, "/upload.ImageManagementService/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageManagementServiceClient) GetImageDetail(ctx context.Context, in *GetImageDetailRequest, opts ...grpc.CallOption) (*GetImageDetailResponse, error) {
	out := new(GetImageDetailResponse)
	err := c.cc.Invoke(ctx, "/upload.ImageManagementService/GetImageDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageManagementServiceClient) GetImageFeed(ctx context.Context, in *GetImageFeedRequest, opts ...grpc.CallOption) (*GetImageFeedResponse, error) {
	out := new(GetImageFeedResponse)
	err := c.cc.Invoke(ctx, "/upload.ImageManagementService/GetImageFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageManagementServiceClient) UpdateImageDetail(ctx context.Context, in *UpdateImageDetailRequest, opts ...grpc.CallOption) (*UpdateImageDetailResponse, error) {
	out := new(UpdateImageDetailResponse)
	err := c.cc.Invoke(ctx, "/upload.ImageManagementService/UpdateImageDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageManagementServiceServer is the server API for ImageManagementService service.
// All implementations must embed UnimplementedImageManagementServiceServer
// for forward compatibility
type ImageManagementServiceServer interface {
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	GetImageDetail(context.Context, *GetImageDetailRequest) (*GetImageDetailResponse, error)
	GetImageFeed(context.Context, *GetImageFeedRequest) (*GetImageFeedResponse, error)
	UpdateImageDetail(context.Context, *UpdateImageDetailRequest) (*UpdateImageDetailResponse, error)
	mustEmbedUnimplementedImageManagementServiceServer()
}

// UnimplementedImageManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageManagementServiceServer struct {
}

func (UnimplementedImageManagementServiceServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageManagementServiceServer) GetImageDetail(context.Context, *GetImageDetailRequest) (*GetImageDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageDetail not implemented")
}
func (UnimplementedImageManagementServiceServer) GetImageFeed(context.Context, *GetImageFeedRequest) (*GetImageFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageFeed not implemented")
}
func (UnimplementedImageManagementServiceServer) UpdateImageDetail(context.Context, *UpdateImageDetailRequest) (*UpdateImageDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageDetail not implemented")
}
func (UnimplementedImageManagementServiceServer) mustEmbedUnimplementedImageManagementServiceServer() {
}

// UnsafeImageManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageManagementServiceServer will
// result in compilation errors.
type UnsafeImageManagementServiceServer interface {
	mustEmbedUnimplementedImageManagementServiceServer()
}

func RegisterImageManagementServiceServer(s grpc.ServiceRegistrar, srv ImageManagementServiceServer) {
	s.RegisterService(&ImageManagementService_ServiceDesc, srv)
}

func _ImageManagementService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageManagementServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.ImageManagementService/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageManagementServiceServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageManagementService_GetImageDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageManagementServiceServer).GetImageDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.ImageManagementService/GetImageDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageManagementServiceServer).GetImageDetail(ctx, req.(*GetImageDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageManagementService_GetImageFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageManagementServiceServer).GetImageFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.ImageManagementService/GetImageFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageManagementServiceServer).GetImageFeed(ctx, req.(*GetImageFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageManagementService_UpdateImageDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageManagementServiceServer).UpdateImageDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.ImageManagementService/UpdateImageDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageManagementServiceServer).UpdateImageDetail(ctx, req.(*UpdateImageDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageManagementService_ServiceDesc is the grpc.ServiceDesc for ImageManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "upload.ImageManagementService",
	HandlerType: (*ImageManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _ImageManagementService_UploadImage_Handler,
		},
		{
			MethodName: "GetImageDetail",
			Handler:    _ImageManagementService_GetImageDetail_Handler,
		},
		{
			MethodName: "GetImageFeed",
			Handler:    _ImageManagementService_GetImageFeed_Handler,
		},
		{
			MethodName: "UpdateImageDetail",
			Handler:    _ImageManagementService_UpdateImageDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_services.proto",
}
